[{"C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\App.js":"1","C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\utils\\generateBoard.js":"2","C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\index.js":"3","C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\components\\Board\\Board.jsx":"4","C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\reportWebVitals.js":"5","C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\components\\Choices\\Choices.jsx":"6"},{"size":386,"mtime":1606550386980,"results":"7","hashOfConfig":"8"},{"size":723,"mtime":1606503278794,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1606454085626,"results":"10","hashOfConfig":"8"},{"size":2684,"mtime":1606550865533,"results":"11","hashOfConfig":"8"},{"size":362,"mtime":1606454085626,"results":"12","hashOfConfig":"8"},{"size":818,"mtime":1606550546982,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1palron",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\App.js",["28"],"C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\utils\\generateBoard.js",["29"],"import { makepuzzle, solvepuzzle, ratepuzzle } from \"sudoku\";\r\nwindow.makepuzzle = makepuzzle;\r\nwindow.solvepuzzle = solvepuzzle;\r\nfunction generateBoard() {\r\n\tconst puzzle = makepuzzle();\r\n\tconst board = { rows: [], filledCnt: 0, wrongMovesCnt: 0 };\r\n\tboard.solution = solvepuzzle(puzzle);\r\n\tfor (let i = 0; i < 9; ++i) {\r\n\t\tconst row = { cols: [], index: i };\r\n\t\tfor (let j = 0; j < 9; ++j) {\r\n\t\t\tlet val = puzzle[i * 9 + j];\r\n\t\t\tif (val !== null) val += 1;\r\n\t\t\tconst col = {\r\n\t\t\t\tval,\r\n\t\t\t\trow: i,\r\n\t\t\t\tcol: j,\r\n\t\t\t\tprefilled: val != null,\r\n\t\t\t};\r\n\t\t\tif (col.prefilled) board.filledCnt++;\r\n\t\t\trow.cols.push(col);\r\n\t\t}\r\n\t\tboard.rows.push(row);\r\n\t}\r\n\tconsole.log(board);\r\n\treturn board;\r\n}\r\nexport default generateBoard;\r\n","C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\index.js",[],"C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\components\\Board\\Board.jsx",["30","31","32"],"import React, { useRef, useState } from \"react\";\r\n\r\nimport { produce } from \"immer\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport Choices from \"../Choices/Choices\";\r\nimport \"./board.css\";\r\nimport generateBoard from \"../../utils/generateBoard\";\r\n\r\nfunction Board({ board, setBoard }) {\r\n\tconst activeCell = useRef(null);\r\n\r\n\tconst setActiveCell = (e) => {\r\n\t\tif (activeCell.current) {\r\n\t\t\tconst choice = e.currentTarget.innerText;\r\n\t\t\tconst { row, col } = activeCell.current;\r\n\t\t\t// * Change cell value\r\n\t\t\tsetBoard((board) =>\r\n\t\t\t\tproduce(board, (updatedBoard) => {\r\n\t\t\t\t\tlet canPlace = true;\r\n\t\t\t\t\t// * Check row\r\n\t\t\t\t\tfor (let i = 0; i < 9; ++i) {\r\n\t\t\t\t\t\tif (updatedBoard.rows[row].cols[i].val == choice) {\r\n\t\t\t\t\t\t\t// updatedBoard.rows[row].cols[i].error = true;\r\n\t\t\t\t\t\t\tcanPlace = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// * Check col\r\n\t\t\t\t\tfor (let i = 0; i < 9; ++i) {\r\n\t\t\t\t\t\tif (updatedBoard.rows[i].cols[col].val == choice) {\r\n\t\t\t\t\t\t\t// updatedBoard.rows[i].cols[col].error = true;\r\n\t\t\t\t\t\t\tcanPlace = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// * Check 3*3 matrix\r\n\t\t\t\t\tlet startrow = Math.floor(row / 3) * 3,\r\n\t\t\t\t\t\tstartcol = Math.floor(col / 3) * 3;\r\n\r\n\t\t\t\t\tfor (let ii = startrow; ii < startrow + 3; ii++) {\r\n\t\t\t\t\t\tfor (let jj = startcol; jj < startcol + 3; jj++) {\r\n\t\t\t\t\t\t\tif (updatedBoard.rows[ii].cols[jj].val === choice) {\r\n\t\t\t\t\t\t\t\tcanPlace = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (canPlace) {\r\n\t\t\t\t\t\tupdatedBoard.rows[row].cols[col].val = choice;\r\n\t\t\t\t\t\tupdatedBoard.error = \"\";\r\n\t\t\t\t\t\tupdatedBoard.filledCnt++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdatedBoard.error = \"Bad Move \" + (row + 1) + \",\" + (col + 1);\r\n\t\t\t\t\t\tupdatedBoard.wrongMovesCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\tconst resetGame = () => {\r\n\t\tactiveCell.current = null;\r\n\t\tsetBoard(generateBoard());\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"board\">\r\n\t\t\t\t{/* <pre>{JSON.stringify(board, null, 0)}</pre> */}\r\n\r\n\t\t\t\t<div className=\"stats-bar\">\r\n\t\t\t\t\t<button onClick={resetGame}>Reset</button>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Filled Cells : </span>\r\n\t\t\t\t\t\t<span className=\"fcVal\">{board.filledCnt}</span>\r\n\t\t\t\t\t\t<span>/81</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Wrong Moves : </span>\r\n\t\t\t\t\t\t<span className=\"wmVal\">{board.wrongMovesCnt}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{board.filledCnt === 81 && \"WON!!\"}\r\n\t\t\t\t<div className=\"grid\">\r\n\t\t\t\t\t{board.rows.map((row) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className=\"row\" key={row.index}>\r\n\t\t\t\t\t\t\t\t{row.cols.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t<Cell cell={cell} activeCell={activeCell} />\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<Choices setActiveCell={setActiveCell} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Board;\r\n","C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\reportWebVitals.js",[],"C:\\Users\\1738\\Documents\\webDev\\REACT-projects\\sudoku\\src\\components\\Choices\\Choices.jsx",[],{"ruleId":"33","severity":1,"message":"34","line":1,"column":10,"nodeType":"35","messageId":"36","endLine":1,"endColumn":19},{"ruleId":"33","severity":1,"message":"37","line":1,"column":35,"nodeType":"35","messageId":"36","endLine":1,"endColumn":45},{"ruleId":"33","severity":1,"message":"38","line":1,"column":25,"nodeType":"35","messageId":"36","endLine":1,"endColumn":33},{"ruleId":"39","severity":1,"message":"40","line":22,"column":46,"nodeType":"41","messageId":"42","endLine":22,"endColumn":48},{"ruleId":"39","severity":1,"message":"40","line":30,"column":46,"nodeType":"41","messageId":"42","endLine":30,"endColumn":48},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ratepuzzle' is defined but never used.","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]